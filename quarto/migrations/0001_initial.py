# Generated by Django 3.0.8 on 2020-08-13 15:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('anfitrion', models.BooleanField(default=False)),
                ('location', models.CharField(default='bogota', max_length=120)),
                ('description', models.TextField(blank=True)),
                ('phone', models.PositiveIntegerField(blank=True, default=1112223344)),
                ('active', models.BooleanField(default=True)),
                ('picture', models.ImageField(blank=True, default='/media/rooms/pictures/user_profile.png', null=True, upload_to='users/pitures/', verbose_name='profile picture')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Images_Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('price', models.IntegerField(blank=True, default=999999)),
                ('nearest_places', models.CharField(max_length=120)),
                ('mts2', models.CharField(default='10mts2', max_length=120)),
                ('furniture', models.TextField(blank=True)),
                ('private_bath', models.BooleanField(default=False)),
                ('wifi', models.BooleanField(default=False)),
                ('closet', models.BooleanField(default=False)),
                ('kitchen', models.BooleanField(default=False)),
                ('pet', models.BooleanField(default=False)),
                ('washing_machine', models.BooleanField(default=False)),
                ('furnish', models.BooleanField(default=False)),
                ('tv', models.BooleanField(default=False)),
                ('smoke', models.BooleanField(default=False)),
                ('couple', models.BooleanField(default=False)),
                ('family_atmosphere', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True)),
                ('available', models.BooleanField(default=True)),
                ('id_images', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quarto.Images_Room')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='images_room',
            name='id_room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quarto.Room'),
        ),
        migrations.CreateModel(
            name='Favorites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quarto.Room')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='favorite_rooms',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='quarto.Favorites'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
